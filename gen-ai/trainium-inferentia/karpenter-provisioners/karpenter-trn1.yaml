---
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: trainium-trn1
  namespace: karpenter # Same namespace as Karpenter add-on installed
spec:
  requirements:
    - key: "topology.kubernetes.io/zone"
      operator: In
      values: [${azs}d]
    - key: "karpenter.sh/capacity-type"
      operator: In
      values: ["spot", "on-demand"]
    - key: "node.kubernetes.io/instance-type"
      operator: In
      values: ["trn1.32xlarge", "trn1n.32xlarge"] # trn1.2xlarge, trn1n.32xlarge
    - key: "kubernetes.io/arch"
      operator: In
      values: ["amd64"]
  providerRef:
    name: trainium-trn1
  labels:
    provisioner: trainium-trn1
    hub.jupyter.org/node-purpose: user
  taints:
    - key: aws.amazon.com/neuroncore
      value: "true"
      effect: "NoSchedule"
    - key: aws.amazon.com/neuron
      value: "true"
      effect: "NoSchedule"
    - key: hub.jupyter.org/dedicated # According to optimization docs https://z2jh.jupyter.org/en/latest/administrator/optimization.html
      operator: "Equal"
      value: "user"
      effect: "NoSchedule"
  ttlSecondsAfterEmpty: 300 # optional, but never scales down if not set

# Note: As of version v0.29.0, the Karpenter AWSNodeTemplate lacks the ability to configure multipleNetwork interfaces for EFA.
# To work around this limitation, we are utilizing Terraform to generate launch templates that include EFA configurations.
# These launch templates are then used as input for the AWS Node template, enabling us to achieve the desired network interface setups.
---
apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: trainium-trn1
  namespace: karpenter
spec:
  subnetSelector:
    Name: "${eks_cluster_id}-private*"
  launchTemplate: "${launch_template_name}"
  tags:
    InstanceType: "trainium"
